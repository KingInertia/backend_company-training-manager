name: Django CI

on:
  push:
    branches:
      - '*'

  pull_request:
    types: [closed]
    branches: ['develop']

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: --health-cmd "pg_isready -U $POSTGRES_USER" --health-interval 10s --health-timeout 5s --health-retries 5

      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set up environment variables
        run: |
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> $GITHUB_ENV
          echo "DEBUG=${{ secrets.DEBUG }}" >> $GITHUB_ENV
          echo "ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}" >> $GITHUB_ENV
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> $GITHUB_ENV
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> $GITHUB_ENV
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> $GITHUB_ENV
          echo "POSTGRES_HOST=localhost" >> $GITHUB_ENV  # Указание хоста на "localhost", так как сервисы запускаются локально
          echo "REDIS_BACKEND=${{ secrets.REDIS_BACKEND }}" >> $GITHUB_ENV
          echo "REDIS_HOST=localhost" >> $GITHUB_ENV  # Так как Redis работает в контейнере, указываем localhost
          echo "DJANGO_LOG_LEVEL=${{ secrets.DJANGO_LOG_LEVEL }}" >> $GITHUB_ENV
          echo "EMAIL_HOST=${{ secrets.EMAIL_HOST }}" >> $GITHUB_ENV
          echo "EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}" >> $GITHUB_ENV
          echo "EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}" >> $GITHUB_ENV
          echo "DEFAULT_FROM_EMAIL=${{ secrets.DEFAULT_FROM_EMAIL }}" >> $GITHUB_ENV
          echo "EMAIL_USE_TLS=${{ secrets.EMAIL_USE_TLS }}" >> $GITHUB_ENV
          echo "CORS_ALLOWED_ORIGINS=${{ secrets.CORS_ALLOWED_ORIGINS }}" >> $GITHUB_ENV

      - name: Run migrations
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        run: |
          python manage.py migrate --noinput

      - name: Run tests
        run: |
          python manage.py test

      - name: Run Ruff Linter
        run: |
          ruff check .

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.event.pull_request.merged == true

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up SSH key for connecting to EC2
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/key
          chmod 600 ~/.ssh/key

      - name: Add EC2 host to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.EC2_PUBLIC_DNS }} >> ~/.ssh/known_hosts

      - name: Deploy to EC2 instance
        run: |
          ssh -i ~/.ssh/key ubuntu@${{ secrets.EC2_PUBLIC_DNS }} <<EOF
            cd /home/ubuntu/back_django/back_meduzzen_intership
            sudo systemctl stop docker-compose-app.service
            sudo docker compose down
            echo $SSH_AUTH_SOCK
            GIT_SSH_COMMAND="ssh -i /home/ubuntu/back_django/key_for_bos" git pull --no-rebase origin develop
            sudo docker compose up --build -d
            sudo systemctl start docker-compose-app.service
          EOF
